<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-05-17T18:10:57+02:00</updated><id>http://localhost:4000/</id><title type="html">Alessio Saltarin - The Guildenstern Studio</title><subtitle>I gather here all my experiments with computer programming languages and codes. You will find most of all Ruby, Java, C++, Scala, Kotlin and Go examples. All of the code found here is licensed with MIT license.
</subtitle><entry><title type="html">How to update your JDK collection on MacOSX</title><link href="http://localhost:4000/java/2017/05/16/update-jdk-macosx.html" rel="alternate" type="text/html" title="How to update your JDK collection on MacOSX" /><published>2017-05-16T10:40:17+02:00</published><updated>2017-05-16T10:40:17+02:00</updated><id>http://localhost:4000/java/2017/05/16/update-jdk-macosx</id><content type="html" xml:base="http://localhost:4000/java/2017/05/16/update-jdk-macosx.html">&lt;p&gt;A Java developer usually maintains on his machine a collection of different versions of &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Java JDK&lt;/a&gt;s to compile and test his applications.&lt;/p&gt;

&lt;p&gt;After some time we discover that we want to remove obsolete JDKs after having added other versions.&lt;/p&gt;

&lt;p&gt;Unfortunately, on MacOSX there is no an easy way to do that.&lt;/p&gt;

&lt;p&gt;So these are the steps to perform a &lt;strong&gt;clean&lt;/strong&gt; removal of an existing JDK.&lt;/p&gt;

&lt;p&gt;First of all we would like to know how many JDKs are installed on our machine. To do that we open a terminal and type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pkgutil --pkgs|grep com.oracle&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;on my machine, as an example, I get:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-msdos&quot; data-lang=&quot;msdos&quot;&gt;com.oracle.jdk7u79
com.oracle.jdk8u112
com.oracle.jdk8u31
com.oracle.jdk8u65
com.oracle.jdk8u77
com.oracle.jre&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s remove version 77 of JDK 8. First of all we need to know where the JDK files are located. To obtain this info:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pkgutil --info com.oracle.jdk8u77&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I get:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-msdos&quot; data-lang=&quot;msdos&quot;&gt;package-id: com.oracle.jdk8u77
version: 1.1
volume: /
location: Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk
install-time: 1459414940&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Very well, now we know that we must remove all files under&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and we do that with root permissions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo rm -R /Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ok, now we must only remember to delete the package information:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pkgutil --forget com.oracle.jdk8u77&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To confirm that we effectively delete the package, we can re-issue&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pkgutil --pkgs|grep com.oracle&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, to add another JDK, it is sufficient to download the image from OpenJDK or &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Oracle&lt;/a&gt; site, and install it like any other MacOSX package.&lt;/p&gt;

&lt;p&gt;(A small Gist with all the needed commands is available &lt;a href=&quot;https://gist.github.com/guildenstern70/8730c4baae9b3b671f3d3712c86cf2a6&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;</content><author><name></name></author><summary type="html">A Java developer usually maintains on his machine a collection of different versions of Java JDKs to compile and test his applications.</summary></entry><entry><title type="html">Edit and Run C++ code on WSL in Windows 10 using CLang</title><link href="http://localhost:4000/cpp/2017/05/12/cpp-in-win10.html" rel="alternate" type="text/html" title="Edit and Run C++ code on WSL in Windows 10 using CLang" /><published>2017-05-12T14:40:17+02:00</published><updated>2017-05-12T14:40:17+02:00</updated><id>http://localhost:4000/cpp/2017/05/12/cpp-in-win10</id><content type="html" xml:base="http://localhost:4000/cpp/2017/05/12/cpp-in-win10.html">&lt;p&gt;Since the appearance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Bash on Ubuntu&lt;/code&gt; on Windows 10, I wondered if it was possible to compile C++ code in Windows 10 using a standard Linux configuration - but without using a Linux partition or Docker.&lt;/p&gt;

&lt;p&gt;It’s a bit tricky, but it’s possible.&lt;/p&gt;

&lt;p&gt;To begin with, we setup a Windows 10 machine to compile and execute Linux C++ code compiled with CLang using &lt;code class=&quot;highlighter-rouge&quot;&gt;Bash on Ubuntu&lt;/code&gt;, also known as &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows Subsystem for Linux&lt;/code&gt; (WSL) provided by Windows 10.&lt;/p&gt;

&lt;p&gt;To setup WSL you can follow these instructions from Microsoft site:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/commandline/wsl/about&quot;&gt;https://msdn.microsoft.com/en-us/commandline/wsl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WSL installed? Can you open your newly installed Ubuntu terminal? Very well, let’s go on.&lt;/p&gt;

&lt;p&gt;First of all we need to install CLang onto WSL. To know what “clang” packages are available in WSL, we can just type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;clang&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On my machine I get:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; clang-3.3
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; clang-3.4
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; clang-3.5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s go ahead and install version 3.5&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;sudo apt-get install clang-3.5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If everything went just fine, you should now be able to launch a very simple clang command, like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;clang-3.5 --help&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and get something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/HelpFile.jpg&quot; alt=&quot;CLang Help&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can edit our first program in C++. We will just use our preferred editor on Windows and then compile using the WSL Command Line tool.&lt;/p&gt;

&lt;p&gt;Let’s try with a simple C++11 source code that computes the number of uppercase letters in a string:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello WSL World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nr_ucase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;for_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nr_ucase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isupper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nr_ucase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nr_ucase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; uppercase letters in: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(you can find other C++11 examples in my &lt;a href=&quot;https://github.com/guildenstern70/cpp11learn&quot;&gt;cpp11learn&lt;/a&gt; project on GitHub.)&lt;/p&gt;

&lt;p&gt;Open your favourite editor, I like &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; so I’m using that. Copy and paste the code above, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/VSCodeCpp.jpg&quot; alt=&quot;Editing in Visual Studio Code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a big problem, now. &lt;em&gt;WSL is not built to allow interoperability with Windows&lt;/em&gt;. This means that even if you save your code into the WSL User Home directory, which is located here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-msdos&quot; data-lang=&quot;msdos&quot;&gt;C:\Users\[your username]\AppData\Local\lxss\home\[username]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;you will not be able to see it in WSL (try it! Note that /lxss/ is a system, hidden directory.)&lt;/p&gt;

&lt;p&gt;You can use the Powershell the get to view the directory contents&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/BAUDir.jpg&quot; alt=&quot;Powershell Dir in WSL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;but any modification made by Windows inside that directory will not be available in WSL. (&lt;a href=&quot;https://blogs.msdn.microsoft.com/commandline/2016/11/17/do-not-change-linux-files-using-windows-apps-and-tools/&quot;&gt;Here&lt;/a&gt; you will find an interesting article that explains everything about it.)&lt;/p&gt;

&lt;p&gt;So, how can we solve the issue? The trick is to use a Windows folder to make the editing, and then mount this folder in WSL.&lt;/p&gt;

&lt;p&gt;First of all, we create a new folder using Powershell, for instance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-msdos&quot; data-lang=&quot;msdos&quot;&gt;mkdir C:\temp\cppcode\uppercase&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and then save our code with Visual Studio Code as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-msdos&quot; data-lang=&quot;msdos&quot;&gt;C:\temp\cppcode\uppercase\main.cpp&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Any Windows directory is mounted by default in WSL:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-msdos&quot; data-lang=&quot;msdos&quot;&gt;C:\ -&amp;gt; /mnt/c
D:\ -&amp;gt; /mnt/d
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;so we will find our file in WSL:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ls -al /mnt/c/Temp/cppcode/uppercase/main.cpp&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We are finally ready to use our CLang compiler. Of course, in a real world project we will setup a CMake script in order to compile and link our source file(s), but for this small example it will be sufficient to launch:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /mnt/c/Temp/cppcode/uppercase/
clang++-3.5 main.cpp -o uppercase -std&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;c++11&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and finally run the executable with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./uppercase&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html">Since the appearance of Bash on Ubuntu on Windows 10, I wondered if it was possible to compile C++ code in Windows 10 using a standard Linux configuration - but without using a Linux partition or Docker.</summary></entry></feed>